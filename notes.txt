1. virtual environment: py -3 -m venv venv <br>
2. actiavte virtual environment in terminal: source venv/scripts/activate <br>
3. start app: uvicorn main:app <br>
4. download postgres - 
Creds: 
host: localhost
username: postgres
port: 5432


brew install postgresql@16
This formula has created a default database cluster with:
  initdb --locale=C -E UTF-8 /opt/homebrew/var/postgresql@16
For more details, read:
  https://www.postgresql.org/docs/16/app-initdb.html

postgresql@16 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have postgresql@16 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"' >> ~/.zshrc

For compilers to find postgresql@16 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/postgresql@16/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/postgresql@16/include"

To start postgresql@16 now and restart at login:
  brew services start postgresql@16
Or, if you don't want/need a background service you can just run:
  LC_ALL="C" /opt/homebrew/opt/postgresql@16/bin/postgres -D /opt/homebrew/var/postgresql@16
==> python@3.12
Python has been installed as
  /opt/homebrew/bin/python3

Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /opt/homebrew/opt/python@3.12/libexec/bin

# Notes:
######## CRUD - Create, Read, Update, Delete Operation##########
# Always plural while creating path operations
# Create - POST -> /posts -> app.post("/posts")
# Read -> GET -> app.get("/posts") or  app.get("/posts/{:id}")
# Update -> PUT (send all the fields to update the entry)/PATCH (change specific item) -> app.put("/posts/{id}")
# Delete - DELETE -> app.delete("/posts/{id}")

# TYPING AND PYDANTIC
# def get_full_name(first_name: str, second_name: str):
#     return first_name.title() + " " + second_name.title()

# print(get_full_name("Anshul", "Singh"))

# from typing import Optional, Union


# # def say_hi(name: Optional[str]):
# # def say_hi(name: Union[str, None] = None):
# #     print(f"Hey {name}!")
    
# # say_hi()

# # Typing: 
# # Simple Types: (int, float, str, bool, bytes), 
# # Generic Types: list, set, tuple, dict
# # Optional, Union
# # Classes as type

# class Person:
    
#     def __init__(self, name: str) -> None:
#         self.name = name

# def get_one_person(one_person: Person):
#     return one_person.name + " man!"

# hello = Person("hello")


# print(get_one_person(one_person = hello))


# # Pydantic Models: data validation - declare the shape of the data as classes with attributes and each attribute has a type, gives you an object with all data 

# from datetime import datetime
# from pydantic import BaseModel

# class User(BaseModel):
#     id: int
#     name: str = "John Doe"
#     signup_ts: datetime | None
#     friends: list[int] = []
    
# external_data = {
#     "id": 1,
#     "name": "Anshul",
#     "signup_ts": "2015-06-01 12:22"
# }
    
# user = User(**external_data)
# print(user)


# from typing import Annotated

# def say_hello(name: Annotated[str, "this is just metadata"]) -> str:
#     return f"hello {name}!"
    
print(say_hello("aSnhul"))


# Database: 
1. you interact with database using DBMS. 
2. Relational - SQL, NoSQL - MongoDB


# While working with Database
# raw SQL vs ORM (Object relational Mapper)
ORM - layer of abstraction between database and us 
Perform all database operation through traditional python code. NO MORE SQL
e.g. Sqlalchemy


Models:
1. Schema Models/ Pydantic models define structure of the request and response

Client (chrome) --Request---> Schema/Pydantic Model -------------> FastAPI
Client (chrome) <----- Schema/Pydantic Model <-------Response------ FastAPI

2. SQLAlchemy Model:
Responsible for defining the columns of our "posts" table within postgres
Used to query, create, delete and update the columns within database


# Authentication:
1. Session based authentication - Stored in the backend server if user is logged in or logged out
2. JWT Token - Stateless - no storing of info, stored in  front end if user is logged in or not

JWT Authentication:
Client --------/login (username + password) ---------> API (if creds are valid sign JWT Token)
Client <----------------------------- JWT token ------ API
Client -------- /posts [JWT token] ------------------> API
Client <------------------------------- data --------- API


JWT Token: access_token
1. Header : algorithm and token type
{
  "alg": "HS256",
  "typ": "JWT"
}
2. Payload: data : should not contain any confidential info
{
  "user_id": 11,
  "exp": 1724273487
}
3. VERIFY SIGNATURE: signature 
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  your-256-bit-secret/secret base64 encoded
) 


If an URL needs to be protected then we add extra dependentcy in that URL that they provide access token.
e.g. /posts/ -> get_current_use: int: Depends(Oauth2.get_current_user)

# Database Relationship primary key and foreign key
1. One to Many Relationship -> e.g. User Table and Post Table


# Adding parameters for specific search -> it will be added to url directly
ket%20anshul -> ket<space>anshul

# Database Miogration Tool: Alembic
- Track changes with database schema and rollback changes at any time.

#Help
alembic --help
alembic revision --help
alembic upgrade --help
alembic downgrade  --help    etc. 


# Initiate 
alembic init <directory name>

# Revision to start, every revision comes with 
alembic revision -m "create post table"  # Creating a table

# Add changed in the file added under version e.g. addign table, columns etc.
alembic upgrade <revision num from revision file> or alembic upgrage head/+1

# check the current head of the database
alembic current 


# Heroku Create the App - Install Heroku on Mac
https://devcenter.heroku.com/articles/getting-started-with-python#set-up

brew tap heroku/brew && brew install heroku


# New Remote will be created
git remote 
git push heroku main


# Adding Procfile to let herocu know how to run app
Procfile
web: uvicorn app.main:app --host=0.0.0.0 --port=${PORT:-5000}
--host=0.0.0.0  > means all addresses 
--port=${PORT:-5000} > meaning Port value will come fron environment ${} > to Setup environment variable

heroku logs -t
# Create Postgres DB on heroku 
# Set up environment variables in Postgres instance and 
# heroku run <command to run > e.g. heroku run alembic upgrade head # get the latest head and create all postgres tables
# heroku ps:restart > restart the application
heroku addons:create heroku-postgresql:<name>


# Setup to deploy on ubuntu server
Host
ce0lkuo944ch99.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com
Database
d1huqe3tqv30f8
User
u7lmh0sok3s6l7
Port
5432
Password
p8b4f4b3bf554339a9b9ba082310a3a9208cc1321cfb1381f03b9a5ceaa6fce50
URI
postgres://u7lmh0sok3s6l7:p8b4f4b3bf554339a9b9ba082310a3a9208cc1321cfb1381f03b9a5ceaa6fce50@ce0lkuo944ch99.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d1huqe3tqv30f8
Heroku CLI
heroku pg:psql postgresql-cubed-55151 --app fastapi-social-media


; host: ubuntu-s-1vcpu-512mb-10gb-syd1-01
; c9S#,EtYd&#S27R
; user with root privilage 
; su - anshul
; usermod -aG sudo anshul    -> providing root access

